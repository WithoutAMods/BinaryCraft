import java.text.SimpleDateFormat
import java.util.*

val loader = "kotlinforforge"

val modId = "binarycraft"
val modName = "BinaryCraft"
val modLicense = "MIT license"
val modGroupId = "eu.withoutaname.mod"
val modAuthors = "WithoutAName"
val modDescription = """
        Digital circuits in Minecraft
    """.trimIndent()

plugins {
    `maven-publish`
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.neo.userdev)
}

version = libs.versions.mod.get()
group = modGroupId

base {
    archivesName.set(modId)
}

java.toolchain.languageVersion.set(JavaLanguageVersion.of(17))

subsystems {
    parchment {
        minecraftVersion(libs.versions.minecraft.get())
        mappingsVersion(libs.versions.mappings.get())
    }
}

runs {
    configureEach {
        systemProperty("forge.logging.markers", "REGISTRIES")
        systemProperty("forge.logging.console.level", "debug")

        modSource(sourceSets.main.get())
    }

    create("client") {
        workingDirectory(file("run/client"))
        systemProperty("forge.enabledGameTestNamespaces", modId)
    }

    create("server") {
        workingDirectory(file("run/server"))
        systemProperty("forge.enabledGameTestNamespaces", modId)
        programArgument("--nogui")
    }

    create("gameTestServer") {
        workingDirectory(file("run/gameTest"))
        systemProperty("forge.enabledGameTestNamespaces", modId)
    }

    create("data") {
        workingDirectory(file("run/data"))
        programArguments(
            "--mod",
            modId,
            "--all",
            "--output",
            file("src/generated/resources/").absolutePath,
            "--existing",
            file("src/main/resources/").absolutePath
        )
    }
}

// Include resources generated by data generators.
sourceSets.main.get().resources {
    srcDir("src/generated/resources")
}


repositories {
    mavenCentral()
    maven("https://thedarkcolour.github.io/KotlinForForge/")
}

dependencies {
    implementation(libs.neo)
    implementation(libs.kotlinforforge)

    testImplementation(libs.junit.jupiter)
    testImplementation(libs.mockk)
}

tasks.test {
    useJUnitPlatform()
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType<ProcessResources>().configureEach {
    val replaceProperties = mapOf(
        "minecraft_version" to libs.versions.minecraft.get(),
        "minecraft_version_range" to libs.versions.minecraftRange.get(),
        "neo_version" to libs.versions.neo.get(),
        "neo_version_range" to libs.versions.neoRange.get(),
        "loader" to loader,
        "loader_version_range" to libs.versions.loader.get(),
        "mod_id" to modId,
        "mod_name" to modName,
        "mod_license" to modLicense,
        "mod_version" to libs.versions.mod.get(),
        "mod_authors" to modAuthors,
        "mod_description" to modDescription,
        "pack_format_number" to libs.versions.packFormat.get()
    )
    inputs.properties(replaceProperties)

    filesMatching(listOf("META-INF/mods.toml", "pack.mcmeta")) {
        println(this)
        expand(replaceProperties)
    }
}

tasks.jar.configure {
    manifest {
        attributes(
            mapOf(
                "Specification-Title" to modId,
                "Specification-Vendor" to modAuthors,
                "Specification-Version" to "1", // We are version 1 of ourselves
                "Implementation-Title" to name,
                "Implementation-Version" to libs.versions.mod.get(),
                "Implementation-Vendor" to modAuthors,
                "Implementation-Timestamp" to SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(Date())
            )
        )
    }
}

publishing {
    publications {
        register<MavenPublication>("mavenJava") {
            artifact(tasks.jar)
        }
    }
    repositories {
        maven("file://$projectDir/mcmodsrepo")
    }
}

tasks.withType<JavaCompile>().configureEach {
    options.encoding = "UTF-8"
}
