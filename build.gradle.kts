import java.text.SimpleDateFormat
import java.util.*


val minecraftVersion = "1.20.1"
val minecraftVersionRange = "[1.20,1.21)"

val neoVersion = "47.1.25"
val neoVersionRange = "[47.1,)"

val loader = "kotlinforforge"
val loaderVersionRange = "[4,)"

val mappingsChannel = "parchment"
val mappingsVersion = "2023.07.30-1.20.1"

val modId = "binarycraft"
val modName = "BinaryCraft"
val modLicense = "MIT license"
val modVersion = "0.1.0"
val modGroupId = "eu.withoutaname.mod"
val modAuthors = "WithoutAName"
val modDescription = """
        Digital circuits in Minecraft
    """.trimIndent()
val packFormatNumber = "15"


plugins {
    eclipse
    idea
    `maven-publish`
    id("net.neoforged.gradle") version "[6.0.18,6.2)"
    id("org.parchmentmc.librarian.forgegradle") version "1.+"
    kotlin("jvm") version "1.9.0"
}

version = modVersion
group = modGroupId

base {
    archivesName.set(modId)
}

java.toolchain.languageVersion.set(JavaLanguageVersion.of(17))

println(
    "Java: ${System.getProperty("java.version")}, JVM: ${System.getProperty("java.vm.version")} (${
        System.getProperty(
            "java.vendor"
        )
    }), Arch: ${System.getProperty("os.arch")}"
)
minecraft {
    mappings(mappingsChannel, mappingsVersion)

    copyIdeResources.set(true)

    runs {
        configureEach {
            property("forge.logging.markers", "REGISTRIES")
            property("forge.logging.console.level", "debug")

            mods {
                create(modId) {
                    source(sourceSets.main.get())
                }
            }
        }

        create("client") {
            workingDirectory(project.file("run/client"))
            property("forge.enabledGameTestNamespaces", modId)
        }

        create("server") {
            workingDirectory(project.file("run/server"))
            property("forge.enabledGameTestNamespaces", modId)
            args("--nogui")
        }

        create("gameTestServer") {
            workingDirectory(project.file("run/gameTest"))
            property("forge.enabledGameTestNamespaces", modId)
        }

        create("data") {
            workingDirectory(project.file("run/data"))
            args(
                "--mod",
                modId,
                "--all",
                "--output",
                file("src/generated/resources/"),
                "--existing",
                file("src/main/resources/")
            )
        }
    }
}

// Include resources generated by data generators.
sourceSets {
    main.get().resources {
        srcDir("src/generated/resources")
    }
}

repositories {
    maven("https://thedarkcolour.github.io/KotlinForForge/")
}

dependencies {
    minecraft("net.neoforged:forge:${minecraftVersion}-${neoVersion}")

    implementation("thedarkcolour:kotlinforforge:4.4.0")
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType<ProcessResources>().configureEach {
    val replaceProperties = mapOf(
        "minecraft_version" to minecraftVersion,
        "minecraft_version_range" to minecraftVersionRange,
        "neo_version" to neoVersion,
        "neo_version_range" to neoVersionRange,
        "loader" to loader,
        "loader_version_range" to loaderVersionRange,
        "mod_id" to modId,
        "mod_name" to modName,
        "mod_license" to modLicense,
        "mod_version" to modVersion,
        "mod_authors" to modAuthors,
        "mod_description" to modDescription,
        "pack_format_number" to packFormatNumber
    )
    inputs.properties(replaceProperties)

    filesMatching(listOf("META-INF/mods.toml", "pack.mcmeta")) {
        println(this)
        expand(replaceProperties)
    }
}

tasks.jar.configure {
    manifest {
        attributes(
            mapOf(
                "Specification-Title" to modId,
                "Specification-Vendor" to modAuthors,
                "Specification-Version" to "1", // We are version 1 of ourselves
                "Implementation-Title" to project.name,
                "Implementation-Version" to modVersion,
                "Implementation-Vendor" to modAuthors,
                "Implementation-Timestamp" to SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(Date())
            )
        )
    }

    finalizedBy("reobfJar")
}

publishing {
    publications {
        register<MavenPublication>("mavenJava") {
            artifact(tasks.jar)
        }
    }
    repositories {
        maven("file://${project.projectDir}/mcmodsrepo")
    }
}

tasks.withType<JavaCompile>().configureEach {
    options.encoding = "UTF-8"
}
